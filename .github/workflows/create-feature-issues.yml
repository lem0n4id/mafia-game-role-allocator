name: Create Feature Issues

on:
  workflow_dispatch:
    inputs:
      feature_name:
        description: 'Feature name'
        required: true
      epic_issue:
        description: 'Epic issue number'
        required: true
      docs_path:
        description: 'Docs directory path (e.g., docs/ways-of-work/plan/<epic>/<feature>)'
        required: false

jobs:
  create-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Create Feature Issue
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Inputs
            const epicIssueNumber = Number(core.getInput('epic_issue'));
            const featureName = core.getInput('feature_name');
            const docsPath = core.getInput('docs_path'); // optional

            // Build optional Docs section: probe directory and link canonical file names (case-insensitive)
            let docsSection = '';
            if (docsPath) {
              try {
                const { data: repoInfo } = await github.rest.repos.get({ owner, repo });
                const defaultBranch = repoInfo.default_branch;

                // List directory contents at docsPath
                const { data: contents } = await github.rest.repos.getContent({ owner, repo, path: docsPath });
                const files = Array.isArray(contents) ? contents : [];

                const findByNames = (names) => {
                  const lowerNames = names.map(n => n.toLowerCase());
                  const match = files.find(item => item.type === 'file' && lowerNames.includes(item.name.toLowerCase()));
                  return match ? match.name : null;
                };

                const prdFile = findByNames(['PRD.md', 'prd.md']);
                const implPlanFile = findByNames(['implementation-plan.md']);
                const projPlanFile = findByNames(['project-plan.md']);
                const issuesChecklistFile = findByNames(['issues-checklist.md']);

                const linkFor = (file) => `https://github.com/${owner}/${repo}/blob/${defaultBranch}/${docsPath}/${file}`;

                const lines = [];
                lines.push('## Docs');
                if (prdFile) lines.push(`- [PRD](${linkFor(prdFile)})`); else lines.push(`- PRD: not found in ${docsPath}`);
                if (implPlanFile) lines.push(`- [Implementation Plan](${linkFor(implPlanFile)})`); else lines.push(`- Implementation Plan: not found in ${docsPath}`);
                if (projPlanFile) lines.push(`- [Project Plan](${linkFor(projPlanFile)})`); else lines.push(`- Project Plan: not found in ${docsPath}`);
                if (issuesChecklistFile) lines.push(`- [Issues Checklist](${linkFor(issuesChecklistFile)})`); else lines.push(`- Issues Checklist: not found in ${docsPath}`);
                docsSection = '\n' + lines.join('\n') + '\n';
              } catch (err) {
                core.warning(`Docs path processing failed for "${docsPath}": ${err.message}`);
                docsSection = `\n> Note: docs path provided (\`${docsPath}\`) but could not read directory.\n`;
              }
            }

            const body = [
              `# Feature: ${featureName}`,
              '',
              '## Description',
              '',
              '(Provide a brief description and goals for this feature.)',
              docsSection
            ].join('\n');

            const { data: featureIssue } = await github.rest.issues.create({
              owner,
              repo,
              title: `Feature: ${featureName}`,
              body,
              labels: ['feature'],
            });

            core.notice(`Created Feature issue #${featureIssue.number}`);